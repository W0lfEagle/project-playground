#!/usr/bin/env node

/**
 * Name: Wilford Engel
 * SRN: 130190747
 * Date: 19th April 2016
 * Description: Node server file executed on server launch
 * Sets up easyRTC signalling server to connect peers
 * Listens for easyRTC message to save lesson content to database
 * Will be used to serve lesson content from database in the future
 */

/**
 * Module dependencies.
 */

var app = require('../server');
var debug = require('debug')('main');
var http = require('http');

var io      = require("socket.io");         // web socket external module
var easyrtc = require("easyrtc");           // EasyRTC external module

var completedLessonService = require('../services/completed-lesson-service');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
// var port = normalizePort('3000'); 
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Start Socket.io so it attaches itself to Express server
var socketServer = io.listen(server, {"log level":1});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var myIceServers = [
  {"url":"stun:stun.l.google.com:19302"},
  {"url":"stun:stun1.l.google.com:19302"},
  {
    "url":"turn:numb.viagenie.ca",
    "username":"info@linguafrancaworld.com",
    "credential":"4jTBNGy@p@mdEn"
  }
  // { url: 'stun:stun.l.google.com:19302'},
        // { url: 'stun:stun1.l.google.com:19302'},
        // { url: 'turn:numb.viagenie.ca', username:"info@linguafrancaworld.com", credential:"4jTBNGy@p@mdEn"}
];

easyrtc.setOption("appIceServers", myIceServers);

easyrtc.setOption("logLevel", "debug");

var onEasyrtcMsg = function(connectionObj, msg, socketCallback, next){
    console.log("Message Received from client.", msg); // this should now execute
    // easyrtc.events.emitDefault("easyrtcMsg", connectionObj, msg, socketCallback, next);
      switch(msg.msgType){
        case "completedLessonData":
            console.log("Server recieved data: " + msg)
            completedLessonService.addLesson(msg.msgData, function(err) {
              if (err) {
                console.log(err);
                return;
              }
            });
            break;
        default:
            easyrtc.events.emitDefault("easyrtcMsg", connectionObj, msg, socketCallback, next);
            break;
    }
};
easyrtc.events.on("easyrtcMsg", onEasyrtcMsg);

// Overriding the default easyrtcAuth listener, only so we can directly access its callback
easyrtc.events.on("easyrtcAuth", function(socket, easyrtcid, msg, socketCallback, callback) {
    easyrtc.events.defaultListeners.easyrtcAuth(socket, easyrtcid, msg, socketCallback, function(err, connectionObj){
        if (err || !msg.msgData || !msg.msgData.credential || !connectionObj) {
            callback(err, connectionObj);
            return;
        }

        connectionObj.setField("credential", msg.msgData.credential, {"isShared":false});

        console.log("["+easyrtcid+"] Credential saved!", connectionObj.getFieldValueSync("credential"));

        callback(err, connectionObj);
    });
});

// To test, lets print the credential to the console for every room join!
easyrtc.events.on("roomJoin", function(connectionObj, roomName, roomParameter, callback) {
    console.log("["+connectionObj.getEasyrtcid()+"] Credential retrieved!", connectionObj.getFieldValueSync("credential"));
    easyrtc.events.defaultListeners.roomJoin(connectionObj, roomName, roomParameter, callback);
});


// Start EasyRTC server
var rtc = easyrtc.listen(app, socketServer, null, function(err, rtcRef) {
    console.log("Initiated");

    rtcRef.events.on("roomCreate", function(appObj, creatorConnectionObj, roomName, roomOptions, callback) {
        console.log("roomCreate fired! Trying to create: " + roomName);

        appObj.events.defaultListeners.roomCreate(appObj, creatorConnectionObj, roomName, roomOptions, callback);
    });
});